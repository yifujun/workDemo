package com.example.thread.encryption;import org.apache.commons.lang3.StringUtils;import org.apache.tomcat.util.codec.binary.Base64;import javax.crypto.BadPaddingException;import javax.crypto.Cipher;import javax.crypto.IllegalBlockSizeException;import javax.crypto.NoSuchPaddingException;import javax.crypto.spec.SecretKeySpec;import java.nio.charset.StandardCharsets;import java.security.InvalidKeyException;import java.security.MessageDigest;import java.security.NoSuchAlgorithmException;/** * 加密. * * @author 易富军 */public class AesTool {    /** 加解密模式. */    private static String CIPHER_MODE = "AES/ECB/PKCS5Padding";    /** 秘钥算法模式. */    private static String ALGORITHM = "AES";    /**     * AES加密方法.     * @param encryptStr 需要加密的数据     * @param key 加密秘钥     * @return 基于BASE64的加密字符串, 若解密异常则返回原内容     */    /*public static String encrypt(String encryptStr, String key) {        //待加密字符串为空        if (StringUtils.isBlank(encryptStr)) {            return null;        }        try {            byte[] keyBytes = md5(key);            Cipher cipher = Cipher.getInstance(CIPHER_MODE);            cipher.init(Cipher.ENCRYPT_MODE, new SecretKeySpec(keyBytes, ALGORITHM));            byte[] encryptedByte = cipher.doFinal(encryptStr.getBytes(StandardCharsets.UTF_8));            return Base64.encodeBase64String(encryptedByte);        } catch (NoSuchAlgorithmException e) {            SystemLogUtils.error("[encrypt]:{}-NoSuchAlgorithmException:{}", encryptStr, e.getMessage());        } catch (NoSuchPaddingException e) {            SystemLogUtils.error("[encrypt]:{}-NoSuchPaddingException:{}", encryptStr, e.getMessage());        } catch (InvalidKeyException e) {            SystemLogUtils.error("[encrypt]:{}-InvalidKeyException:{}", encryptStr, e.getMessage());        } catch (IllegalBlockSizeException e) {            SystemLogUtils.error("[encrypt]:{}-IllegalBlockSizeException:{}", encryptStr, e.getMessage());        } catch (BadPaddingException e) {            SystemLogUtils.error("[encrypt]:{}-BadPaddingException:{}", encryptStr, e.getMessage());        } catch (Exception e) {            SystemLogUtils.error("[encrypt]:{}-Exception:{}", encryptStr, e.getMessage());            throw new WeChatException(ErrorEnum.DIGEST_EXCEPTION);        }        return encryptStr;    }    *//**     * 用MD5将密钥转化为16位定长密钥.     * @param key 加解密秘钥     * @return byte[]     *//*    private static byte[] md5(String key) {        try {            //生成MD5定长秘钥算法模式.            String digestAlgorithm = "MD5";            MessageDigest md5 = MessageDigest.getInstance(digestAlgorithm);            return md5.digest(key.getBytes(StandardCharsets.UTF_8));        } catch (NoSuchAlgorithmException e) {            SystemLogUtils.error("[md5]-NoSuchAlgorithmException:" + e.getMessage());            throw new WeChatException(ErrorEnum.DIGEST_EXCEPTION);        } catch (Exception e) {            SystemLogUtils.error("[md5]-Exception:" + e.getMessage());            throw new WeChatException(ErrorEnum.DIGEST_EXCEPTION);        }    }*/}